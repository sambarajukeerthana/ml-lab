import numpy as np #We are using alias to name numpy package
 import cv2 #OpenCV library is being imported in this line as cv2
 import matplotlib.pyplot as plt #importing the sub module of matplotlib called pyplot 
further I'm using alias them as plt
 # program to capture from the webcam
 cam = cv2.VideoCapture(0)
 result, image = cam.read() 
if result:
    cv2.imshow("captured picure",image)
    cv2.waitKey()
    cv2.imwrite("image3.jpg", image) 
else:
    print("no image found")
 image = cv2.imread("image2.jpg") #reading the image2 from the disk where the image is in 
the same hierarchy as this program and saving it to a variable named image
 new = cv2.resize(image, (1200, 800)) #resizing the contents of image variable to 
1200,800px and saving the results to new variable          
cv2.imshow('old image', image) #displaying the original image
 cv2.waitKey() #it reatins the picture window displayed in the previous line until we 
close it
 cv2.imshow('new resized image',new )#displaying the resized image
 cv2.waitKey()
 cv2.imwrite("newimage.jpg", new) #writing the contents of resized data present in new 
variable to newimage.jpg
 #Blurring image
 blurimage = cv2.blur(image, (50,50))  
cv2.imshow('blurred  image', blurimage)
 cv2.waitKey()
 #Greyscaling image
 gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
 cv2.imshow('Grayscale Lion', gray_image)
 cv2.imwrite("gray_image.jpg",gray_image)
 cv2.waitKey()
 #Rotation
print(image.shape)
 # print(gray_image.shape)
 h, w = image.shape[:2]
 center = (w / 2, h / 2)
 print(type(center))
 mat = cv2.getRotationMatrix2D(center, 90, 1)
 rotating = cv2.warpAffine(image, mat, (h, w))
 cv2.imshow('rotated', rotating)
 cv2.waitKey()
 #Edge Detection
 img_blur = cv2.GaussianBlur(image,(3,3), sigmaX=0, sigmaY=0) 
# sobelx = cv2.Sobel(src=img_blur, ddepth=cv2.CV_64F, dx=1, dy=0, ksize=5) # Sobel Edge 
Detection on the X axis
 # sobely = cv2.Sobel(src=img_blur, ddepth=cv2.CV_64F, dx=0, dy=1, ksize=5) # Sobel Edge 
Detection on the Y axis
 sobelxy = cv2.Sobel(src=img_blur, ddepth=cv2.CV_64F, dx=1, dy=1, ksize=5) # Combined X 
and Y Sobel Edge Detection
 cv2.imshow('Sobel X Y using Sobel() function', sobelxy)
 cv2.waitKey()
 #Segmentation
 src = cv2.imread("jap.jpeg", cv2.IMREAD_GRAYSCALE); 
cv2.imshow("Gray scale image",src)
 # Basic threhold example 
th, dst = cv2.threshold(src, 0, 255, cv2.THRESH_BINARY); 
cv2.imshow('grey scale image', dst)
 cv2.waitKey()
 #Background subtraction
 cap = cv2.VideoCapture('fish1.mp4') 
fgbg = cv2.createBackgroundSubtractorMOG2()   
while(1): 
ret, frame = cap.read()  
fgmask = fgbg.apply(frame)   
cv2.imshow('fgmask', fgmask) 
cv2.imshow('frame',frame )       
k = cv2.waitKey(30) & 0xff
 if k == 27: 
break
 cap.release()
 #Morphological operations
 image = cv2.imread("image2.jpg")
 gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
 cv2.imshow("Original", image)
 eroded = cv2.erode(gray.copy(), None, iterations=2)
 eroded2 = cv2.erode(gray.copy(), None, iterations=5)
 cv2.imshow("Eroded 2 times", eroded)
 cv2.waitKey()
 cv2.imshow("Eroded 5 times", eroded2)
Â cv2.waitKey(0)
